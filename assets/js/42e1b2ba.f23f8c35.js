"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[648],{5207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(4848),r=n(8453);const o={sidebar_position:5},i="Drop",a={id:"tutorial-basics/drop",title:"Drop",description:"Key concepts: Communication between UI thread and JS thread",source:"@site/docs/tutorial-basics/drop.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/drop",permalink:"/slimy/docs/tutorial-basics/drop",draft:!1,unlisted:!1,editUrl:"https://github.com/carozo/slimy/tree/main/docs/tutorial-basics/drop.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Xlimy",permalink:"/slimy/docs/tutorial-basics/xlimy"},next:{title:"Congratulations!",permalink:"/slimy/docs/tutorial-basics/congratulations"}},c={},l=[{value:"Resources",id:"resources",level:2},{value:"Threads",id:"threads",level:3},{value:"Challenge",id:"challenge",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"drop",children:"Drop"}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"Key concepts: Communication between UI thread and JS thread"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,s.jsx)(t.h3,{id:"threads",children:"Threads"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://brooklinmyers.medium.com/react-native-understanding-threads-e026c7d62bb2",children:"Understanding React Native threads"})}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"But what if I want to run certain processes in one thread, but call them from the other? For example, what if we wanted to set a React State from a gesture handler? Well, take a look at the docs for these two functions:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUIJS",children:"runOnJS"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.a,{href:"https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI",children:"runOnUI"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"challenge",children:"Challenge"}),"\n",(0,s.jsx)(t.p,{children:"In this challenge we\u2019ll count how many times Slimy has been dropped."}),"\n",(0,s.jsx)("video",{controls:!0,autoplay:!0,loop:!0,style:{maxHeight:640,minHeight:200},children:(0,s.jsx)("source",{src:"https://user-images.githubusercontent.com/80724668/187310893-69f28b75-c18a-4944-a3b8-3d3629536152.mov"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"\ud83d\udca1 TIPS && HINTS:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Probably we would want to save this in a state."}),"\n",(0,s.jsx)(t.li,{children:"You don\u2019t have to change the background color. I did it just to reinforce the concept."}),"\n"]}),(0,s.jsx)(t.p,{children:"\u2754\xa0Questions to consider:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["How can you be sure that the counter will increment ",(0,s.jsx)(t.em,{children:"after"})," the animation ended?"]}),"\n"]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);